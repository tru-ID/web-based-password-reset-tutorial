<div class="row justify-content-md-center" style="margin-top: 100px">
    <div class="col-md-6">

        {{#if message}}
            <div class="alert {{messageClass}}" role="alert">
                {{message}}
            </div>
        {{/if}}

        <form method="POST" id="password_reset" action="/password-reset">
            <div class="form-group">
                <label for="emailInput">Email address</label>
                <input name="email" type="email" class="form-control" id="emailInput" placeholder="Enter email">
            </div>
            <button type="submit" class="btn btn-primary">Reset my Password</button>
        </form>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@tru_id/tru-sdk-web/dist/tru-id-sdk.umd.js"></script>
<script>
	// Step 1 - Do coverage check
	async function checkCoverage(ev) {
		try {
			const deviceCoverageResult = await axios.get('/api/coverage', {
				validateStatus: (status) => status >= 200 && status <= 412,
			})

			// If there's no coverage then prompt the user to turn off WiFi if it's enabled and recheck.
			if (deviceCoverageResult.status === 200 && deviceCoverageResult.data.coverage === true) {
				// tru.ID has coverage..
				await createSubscriberCheck(ev)
			} else if (deviceCoverageResult.status === 400 || deviceCoverageResult.status === 412) {
				// No coverage continue with POST request
				console.log('no coverage')
				return true
			} else {
				// Unexpected result, continue with POST request
				console.log('unexpected result')
				return true
			}
		} catch (ex) {
			// Unexpected result, continue with POST request
			console.log('error')
			console.log(ex)
			return true
		}
	}

	// Step 2 - If covered, do SubscriberCheck(based on the email address....)
	async function createSubscriberCheck(ev) {
		console.log('creating subscriber check')
		try {
			const emailInput = document.getElementById('emailInput')

			let emailValue = emailInput.value
			// strip spaces out of the phone number and replace within input
			emailValue = emailValue.replace(/\s+/g, '')
			emailInput.value = emailValue
			emailInput.blur()

			// Create SubscriberCheck resource
			const subscriberCheckCreateResult = await axios.post('/api/subscriber-check', {
				email: emailValue
			})

			if (subscriberCheckCreateResult.status === 200) {
				// Step 3 - Open Check URL. If successful, end up on `password-reset-code`. If fail, call fallback endpoint. (SMS)
				console.log('opening check url')
				console.log(subscriberCheckCreateResult)
				await tru.ID.openCheckUrl(subscriberCheckCreateResult.data.check_url, {
					checkMethod: 'image',
					debug: true,
					// we don't care here as we are already doing
					// the device coverage check automatically on page load
					// through the node server
					checkDeviceCoverage: false,
				})
			} else {
				return true
			}
		} catch (error) {
			console.log(error)

			if (error.response.status === 400) {
				console.log('Your Mobile Network is not supported or you may be on WiFi, if so disconnect from WiFi.')
			} else {
				console.log('An error occurred while creating a SubscriberCheck.')
			}
			return true
		}
	}

	document
		.getElementById('password_reset')
		.addEventListener('submit', async (event) => {
			const coverage = await checkCoverage()
			if (coverage !== true) {
				event.preventDefault()
			}
		})
</script>